/* automatically generated by rust-bindgen 0.69.4 */

/* libR-sys version: 0.7.0 */
/* bindgen clang version: clang version 18.1.6 */
/* r version: 4.5.0-devel */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[doc = "R_xlen_t is defined as int on 32-bit platforms, and\n that confuses Rust. Keeping it always as ptrdiff_t works\n fine even on 32-bit.\n <div rustbindgen replaces=\"R_xlen_t\"></div>"]
pub type R_xlen_t = isize;
#[repr(C)]
pub struct Rcomplex {
    pub __bindgen_anon_1: __BindgenUnionField<Rcomplex__bindgen_ty_1>,
    pub private_data_c: __BindgenUnionField<__BindgenComplex<f64>>,
    pub bindgen_union_field: [u64; 2usize],
}
pub type SEXP = *mut SEXPREC;
extern "C" {
    pub fn formatLogicalS(arg1: SEXP, arg2: R_xlen_t, arg3: *mut ::std::os::raw::c_int);
    pub fn formatIntegerS(arg1: SEXP, arg2: R_xlen_t, arg3: *mut ::std::os::raw::c_int);
    pub fn formatRealS(
        arg1: SEXP,
        arg2: R_xlen_t,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    );
    pub fn formatComplexS(
        arg1: SEXP,
        arg2: R_xlen_t,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    );
    pub fn Rf_EncodeReal0(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
    #[doc = "Printing"]
    pub fn Rf_IndexWidth(arg1: R_xlen_t) -> ::std::os::raw::c_int;
    pub fn Rf_VectorIndex(arg1: R_xlen_t, arg2: ::std::os::raw::c_int);
    #[doc = "void printLogicalVector(int *, R_xlen_t, int);"]
    pub fn Rf_printIntegerVector(
        arg1: *const ::std::os::raw::c_int,
        arg2: R_xlen_t,
        arg3: ::std::os::raw::c_int,
    );
    pub fn Rf_printComplexVector(
        arg1: *const Rcomplex,
        arg2: R_xlen_t,
        arg3: ::std::os::raw::c_int,
    );
    pub fn printIntegerVectorS(arg1: SEXP, arg2: R_xlen_t, arg3: ::std::os::raw::c_int);
    pub fn printRealVectorS(arg1: SEXP, arg2: R_xlen_t, arg3: ::std::os::raw::c_int);
    pub fn printComplexVectorS(arg1: SEXP, arg2: R_xlen_t, arg3: ::std::os::raw::c_int);
}
